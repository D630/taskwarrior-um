#!/usr/bin/env bash

# Copyright 2014 D630
# https://github.com/D630/taskwarrior-um

# -- DEBUGGING.

#printf '%s (%s)\n' "$BASH_VERSION" "${BASH_VERSINFO[5]}" && exit 0
#set -o xtrace #; exec 2>> ~/taskum.log
#set -o verbose
#set -o noexec
#set -o errexit
#set -o nounset
#set -o pipefail
#trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND?")' DEBUG

# -- SETTINGS.

#declare vars_base=$(set -o posix ; set)

# -- FUNCTIONS.

__taskum_version() { echo "taskwarrior-um 0.1.2.0" ; }

__taskum_help() {
    printf "taskum [-h|-v|-n] [-a|TASKWARRIOR_SUBCOMMAND]

OPTIONS
-------
    -h,  --help
    -v,  --version
    -n,  --verbose-nothing   means: 'task rc.verbose:nothing'

SUBCOMMANDS
-----------
    -a,  --add                [ <AFIELD> ... ]
    TASKWARRIOR_SUBCOMMAND   [ <NIDFILTER> ]
                             See 'man task'

ARGUMENTS
---------
    <AFIELD>
                             'uri:string'
                             'name:string'
                             'note:string'
                             'pro:one.project.with.hierarchy'
                             'dep:id,id,id'
                             '+tag'
    <NIDFILTER>              '--id'

-------------------------------------------------------------
"
}

__taskum_add()
{
    builtin declare \
        authority= \
        dependencies= \
        i= \
        name= \
        note= \
        part= \
        project= \
        scheme= \
        uri=
    builtin declare -a tags="()"
    builtin declare -ga task_add_args="()"

    if (($# == 0))
    then
        builtin read -re -p "URI: " uri
        uri=${uri%%/}
        __taskum_test_uri
        builtin read -re -p "Name: " name
        builtin read -re -p "Note: " note
        IFS=';' builtin read -re -p "Tags: " -a tags
        builtin read -re -p "Project: " project
        builtin read -re -p "Dependencies: " dependencies
    else
        for i
        do
            case $i in
                uri:?*)
                    uri=${i#*:}
                    uri=${uri%%/}
                    __taskum_test_uri
                    ;;
                name:?*)
                    name=${i#*:}
                    ;;
                note:?*)
                    note=${i#*:}
                    ;;
                pro:?*)
                    project=${i#*:}
                    ;;
                +?*)
                    tags+=("${i#*+}")
                    ;;
                dep:?*)
                    dependencies=${i#*:}
            esac
        done
    fi

    [[ -z $uri ]] && { echo "We need an URI to record." 1>&2 ; return 1 ; }

    ((${#tags[@]} == 0)) && tags[0]=null
    scheme=${uri%%:*}
    IFS='/' builtin read -r authority part <<< "${uri##*://}"
    part=/${part%%/}

    task_add_args=(
                  description:uri
                  uri:\"${uri}\"
                  scheme:${scheme}
                  authority:${authority}
                  part:\"${part}\"
                  name:\"${name:-null}\"
                  note:\"${note:-null}\"
                  project:${project}
                  depends:${dependencies}
                  ${tags[@]/#/+}
                  )

    ((${#task_add_args[@]} >= 2))
}

__taskum_test_uri()
{
    if [[ ! $uri =~ ^(https?|ftps?|davs?|gopher|webdavs?):// ]]
    then
        { echo "Scheme is not allowed." 1>&2 ; builtin exit 1 ; }
    elif (($(command task status:pending uri:"\"${uri}\"" count) != 0))
    then
        { echo "URI '${uri}' has already been recorded." 1>&2 ; builtin exit 1 ; }
    fi
}

__taskum_calculate_id()
{
    builtin declare \
        id= \
        last_id=
    builtin declare -a ids="()"

    IFS='-' builtin read -r _ last_id < <(command task id)

    for id in $(__taskum_parse_id "$1")
    do
        ids+=($((last_id + 1 - id)))
    done

    builtin printf -v filter '%s,' "${ids[@]}"
    builtin printf -v filter '%s\n' "${filter%*,}"
}

__taskum_parse_id() { builtin eval "builtin printf '%s\n' $(command sed -re 's/,/ /g;s/([[:digit:]]+)-([[:digit:]]+)/{\1..\2}/g' <<< "$1")" ; }

# -- MAIN.

__taskum_main()
{
    builtin declare -r \
        predir_configdir=${XDG_CONFIG_HOME:-${HOME}/.config} \
        predir_datadir=${XDG_DATA_HOME:-${HOME}/.local/share}

    builtin declare -rx \
        TASKDATA=${TASKUM_DATA:-${predir_datadir}/taskum} \
        TASKRC=${TASKUM_CONFIG:-${predir_configdir}/taskum}/taskumrc

    [[ ! -d $TASKDATA ]] && command mkdir -p -- "$TASKDATA"
    [[ ! -f ${TASKRC%/*} ]] && command mkdir -p -- "${TASKRC%/*}"

    builtin declare \
        filter= \
        rc_verbose_nothing=

    while builtin :
    do
        case ${1#-} in
            v|-version)
                builtin shift 1
                __taskum_version
                command task version
                builtin exit $?
                ;;
            h|-help)
                builtin shift 1
                __taskum_help
                command task help
                builtin exit $?
                ;;
            a|-add)
                builtin shift 1
                __taskum_add "$@" && command task add "${task_add_args[@]}"
                builtin exit $?
                ;;
            n|-verbose-nothing)
                builtin shift 1
                rc_verbose_nothing=rc.verbose:nothing
                continue
                ;;
            -[0-9]*)
                __taskum_calculate_id "${1#--}"
                builtin shift 1
                ;&
            *)
                command task "$rc_verbose_nothing" "$filter" "$@"
                builtin exit $?
        esac
    done
}

__taskum_main "$@"
